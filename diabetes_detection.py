# -*- coding: utf-8 -*-
"""Diabetes Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12MSFak3uKJRBgXuj_CXSaYXT3t3NWVDe

DataSet Info
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn import metrics
df=pd.read_csv("/content/drive/MyDrive/diabetes.csv")
df.head()

"""from google.colab import drive
drive.mount('/content/drive')"""

df

from os import X_OK
x=df.drop(["Outcome"],axis='columns')
x

y=df.Outcome
y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=0)

(X_train)

len(X_train)

(X_test)

len(X_test)

"""all algorithm

**Naive_Bayes_Classifier**
"""

from sklearn.naive_bayes import GaussianNB
nvclassifier = GaussianNB()
nvclassifier.fit(X_train, y_train)
y_pred=nvclassifier.predict(X_test)

from sklearn.metrics import classification_report,accuracy_score,confusion_matrix

print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))

print("if you want to see other algo reports\n")
print("press Enter Once")
input("")

"""Linear Regression"""

print("It is Logistic Regression\n")
print("press ENTER to have a look\n")
input("")

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(X_train,y_train)
model.predict(X_test)

model.score(X_train,y_train)

model.predict([[2,107,74,30,100,33.6,0.404,23]])

y_pred= model.predict(X_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test, y_pred))
print( accuracy_score(y_test, y_pred))
print( classification_report(y_test, y_pred))



from sklearn.svm import SVC
model= SVC()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
model.score(X_test, y_test)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
print(confusion_matrix(y_test, y_pred))
print( accuracy_score(y_test, y_pred))
print( classification_report(y_test, y_pred))

print("go to next by clicking enter\n")
input("")

"""**Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_train)
print(model.score(X_test,y_test))
print(classification_report(y_test,y_pred))
input("enter any algo")

from sklearn.svm import SVC
model=SVC()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(model.score(X_test,y_test))
print(classification_report(y_test,y_pred))
input("enter any algo")

print("here we will see KNN report on Diabetes Dataset\n")
print("click ENTER\n")
input("")

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_train)
print(model.score(X_test,y_test))
print(classification_report(y_test,y_pred))

print("here we will KMeans report on Diabetes Dataset\n")
print("click ENTER\n")
input("")


from pandas.core.common import random_state
from sklearn.cluster import KMeans
model=KMeans(n_clusters=3, random_state=0)
model.fit(x)
KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, n_clusters=3, n_init =10,random_state=0, tol=0.0001, verbose=0)
model.cluster_centers_
y_pred=model.predict(X_test)
print(model.score(X_test,y_test))
print(classification_report(y_test,y_pred))

print("Did You NOTICED accuracy score was negative?\n")

inertias=[]
for i in range(1,15):
  kmeans=KMeans(n_clusters=i)
  kmeans.fit(x)
  inertias.append(kmeans.inertia_)

plt.plot(range(1,15),inertias, marker='+',color='red')
plt.xlabel("clusters")
plt.ylabel("inertia")
plt.title("Elbow to get K")
plt.show()
print("Whatever Should be Value of K from this Elbow??\n")
input(" ")

"""Desicion Tree Classifier"""

print("here we will see Decision Tree Classifier report on Diabetes Dataset\n")
print("click ENTER\n")
input("")

from sklearn import tree
model=tree.DecisionTreeClassifier(min_samples_split =20)
model.fit(X_train,y_train)

y_pred=model.predict(X_test)

from sklearn.metrics import classification_report,accuracy_score,confusion_matrix

print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))

"""**At last ..there is a question which ML approach would best suited this DIABETES dataset as per you ?**

MUST Reply your ANSWER
"""

print("your answer please?\n")
input("")

"""**THANKS**"""